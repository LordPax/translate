#!/bin/bash
# author : lordpax
# backup v0.2.1

version="v0.2.1"
config="${HOME}/.config/translate"
dotenv="${config}/config"
logPath="${config}/log"
usedEngine=""
sourceLang=""
targetLang=""
text=""
dependencies="curl jq"

# echo_err <msg>
function echo_err() {
    [ -z "$1" ] && exit 1
    echo -e "\e[31mERROR :\e[0m $1" > /dev/stderr
}

# echo_log <msg>
function echo_log() {
    [ -z "$1" ] && exit 1
    local date=$(date "+%Y-%m-%d %H:%M:%S")
    echo -e "[$date] : $1" >> "$logPath"
}

function helpFunc() {
    echo -e $"Usage : $(basename "$0") <option> [text]

Option :
-h or --help ........................... Show help
-v or --version ........................ Show version
-e or --engine <engine> ................ Set engine (default : $usedEngine)
-s <lang> .............................. Source language
-t <lang> .............................. Target language

Engine :
* deepl
* libre

Example :
$(basename "$0") -t fr \"Hello World!\"
echo \"Hello World!\" | $(basename "$0") -t fr"

    exit 0
}

function checkDependencies() {
    for dependency in $dependencies; do
        ! command -v "$dependency" > /dev/null 2>&1 && \
            echo_err "Dependency \"$dependency\" not found" && exit 1
    done
}

function verification() {
    [ -z "$USED_ENGINE" ] && echo_err "Engine must be defined" && exit 1
    [ -z "$usedEngine" ] && usedEngine="$USED_ENGINE"
    [ -z "$DEEPL_ROUTE" ] && echo_err "Deepl route is not defined in dotenv" && exit 1
    [ -z "$LIBRE_ROUTE" ] && echo_err "Libre Translation route is not defined in dotenv" && exit 1
    [ -z "$text" ] && echo_err "Text is needed" && exit 1
    [ -z "$targetLang" ] && echo_err "Target language is needed" && exit 1
}

function writeConfig() {
    echo "USED_ENGINE=deepl"
    echo "DEEPL_ROUTE=https://api-free.deepl.com/v2/translate"
    echo "DEEPL_KEY="
    echo "LIBRE_ROUTE_DETECT=localhost:5000/detect"
    echo "LIBRE_ROUTE=localhost:5000/translate"
    echo "LIBRE_KEY=not mandatory if route is on localhost"
}

function initConfig() {
    [ ! -d "$config" ] && mkdir "$config" && echo "Config are generated"
    [ ! -f "$dotenv" ] && writeConfig > "$dotenv" && echo "Dotenv file is generated"
}

function readDotenv() {
    [ ! -f "$dotenv" ] && echo_err "readDotenv : Dotenv file not found" && exit 1

    local k
    local v

    while read -r var; do
        [ "${var:0:1}" = "#" ] && continue
        k=${var%=*}
        v=${var#*=}
        [ -n "$k" ] && export "$k=$v"
    done < "$dotenv"
}

function translateDeepl() {
    [ -z "$DEEPL_KEY" ] && echo_err "Deepl api key is not defined in dotenv" && exit 1
    local translated

    # source language can be empty
    translated=$(curl -s \
        -X POST "$DEEPL_ROUTE" \
        -H "Authorization: DeepL-Auth-Key $DEEPL_KEY" \
        -d "text=$text" \
        -d "target_lang=$targetLang" \
        -d "source_lang=$sourceLang"
    )

    [ $? -ne 0 ] && echo_err "Something wrong with translation" && exit 1
    echo "$translated" | jq -r .translations[0].text
}

function translateLibre() {
    # if key is not found and the route is not on localhost, print error
    ([ -z "$LIBRE_KEY" ] && ! echo "$LIBRE_ROUTE" | grep "localhost" &> /dev/null) \
        && echo_err "Libre Translate api key is not defined in dotenv" && exit 1

    if [ -z "$sourceLang" ]; then
        local detected=$(curl -s \
            -X POST "$LIBRE_ROUTE_DETECT" \
            -H "accept: application/json" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "q=$text" \
            -d "api_key=$LIBRE_KEY"
        )
        [ $? -ne 0 ] && echo_err "Something wrong with language detection" && exit 1
        sourceLang=$(echo "$detected" | jq -r .[0].language)
    fi

    local translated=$(curl -s \
        -X POST "$LIBRE_ROUTE" \
        -H "Content-Type: application/json" \
        -d "{\"q\":\"$text\",\"source\":\"$sourceLang\",\"target\":\"$targetLang\",\"api_key\":\"$LIBRE_KEY\"}"
    )

    [ $? -ne 0 ] && echo_err "Something wrong with translation" && exit 1
    echo "$translated" | jq -r .translatedText
}

function translateEngine() {
    # TODO : add other engine here
    echo "example engine"
}

function main () {
    if [ $# -ge 1 ]; then
        for _ in $(seq 1 $#); do
            case $1 in
                -h | --help)
                    helpFunc;;
                -v | --version)
                    echo $version
                    exit 0;;
                -e | --engine)
                    usedEngine=$2
                    shift;;
                -s)
                    sourceLang=$2
                    shift;;
                -t)
                    targetLang=$2
                    shift;;
                "") ;;
                -*)
                    echo_err $"Unknown parameter \"$1\""
                    exit 1;;
                *)
                    text=$1
                    shift
            esac
            shift
        done
        [ -z "$text" ] && text=$(cat /dev/stdin)
    fi

    verification

    case $usedEngine in
        deepl)
            translateDeepl;;
        libre)
            translateLibre;;
        example)
            translateEngine;;
        *)
            echo_err "Engine \"$usedEngine\" not found"
            exit 1;;
    esac
}

checkDependencies
initConfig
readDotenv
main "$@"

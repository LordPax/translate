#!/bin/bash
# author : lordpax
# backup v0.2.0

version="v0.2.0"
config="${HOME}/.config/translate"
dotenv="${config}/.env"
logPath="${config}/log"
usedEngine="deepl"
sourceLang=""
targetLang=""
text=""

# echo_err <msg>
function echo_err() {
    [ -z "$1" ] && exit 1
    echo -e "\e[31mERROR :\e[0m $1" > /dev/stderr
}

# echo_log <msg>
# Log message for test purpose
function echo_log() {
    [ -z "$1" ] && exit 1
    local date=$(date "+%Y-%m-%d %H:%M:%S")
    echo -e "[$date] : $1" >> "$logPath"
}

function helpFunc() {
    echo -e $"Usage : $(basename $0) <option> [text]

Option :
-h or --help ........................... Show help
-v or --version ........................ Show version
-e or --engine <engine> ................ Set engine (default : deepl)
-s <lang> .............................. Source language
-t <lang> .............................. Target language

Engine :
* deepl
* libre

Example :
translate -t fr \"Hello World!\"
echo \"Hello World!\" | translate -t fr"

    exit 0
}

function verification() {
    [ -z "$(which jq 2> /dev/null)" ] && echo_err "\"jq\" is required" && exit 1
    [ -z "$DEEPL_ROUTE" ] && echo_err "Deepl route is not defined in dotenv" && exit 1
    [ -z "$LIBRE_ROUTE" ] && echo_err "Libre Translation route is not defined in dotenv" && exit 1
    [ -z "$text" ] && echo_err "Text is needed" && exit 1
    [ -z "$targetLang" ] && echo_err "Target language is needed" && exit 1
}

function initConfig() {
    [ ! -d "$config" ] && mkdir "$config" && echo "Config are generated"
}

# readDotenv <env>
function readDotenv() {
    ([ -z "$1" ] || [ ! -f $1 ]) \
        && echo_err "Dotenv file not found" && exit 1

    local k
    local v

    while read -r var; do
        if [ ! "${var:0:1}" = "#" ]; then
            k=${var%=*}
            v=${var#*=}
            [ -n "$k" ] && export "$k"="$v"
        fi
    done < "$1"
}

function translateDeepl() {
    [ -z "$DEEPL_KEY" ] && echo_err "Deepl api key is not defined in dotenv" && exit 1
    local translated

    # source language can be empty
    translated=$(curl -s \
        -X POST "$DEEPL_ROUTE" \
        -H "Authorization: DeepL-Auth-Key $DEEPL_KEY" \
        -d "text=$text" \
        -d "target_lang=$targetLang" \
        -d "source_lang=$sourceLang"
    )

    [ $? -ne 0 ] && echo_err "Something wrong with translation" && exit 1
    echo "$translated" | jq -r .translations[0].text
}

function translateLibre() {
    # if key is not found and the route is not on localhost, print error
    ([ -z "$LIBRE_KEY" ] && ! echo "$LIBRE_ROUTE" | grep "localhost" &> /dev/null) \
        && echo_err "Libre Translate api key is not defined in dotenv" && exit 1

    if [ -z "$sourceLang" ]; then
        local detected=$(curl -s \
            -X POST "$LIBRE_ROUTE_DETECT" \
            -H "accept: application/json" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "q=$text" \
            -d "api_key=$LIBRE_KEY"
        )
        [ $? -ne 0 ] && echo_err "Something wrong with language detection" && exit 1
        sourceLang=$(echo "$detected" | jq -r .[0].language)
    fi

    local translated=$(curl -s \
        -X POST "$LIBRE_ROUTE" \
        -H "Content-Type: application/json" \
        -d "{\"q\":\"$text\",\"source\":\"$sourceLang\",\"target\":\"$targetLang\",\"api_key\":\"$LIBRE_KEY\"}"
    )

    [ $? -ne 0 ] && echo_err "Something wrong with translation" && exit 1
    echo "$translated" | jq -r .translatedText
}

function translateEngine() {
    # TODO : add other engine here
    echo "example engine"
}

if [ $# -ge 1 ]; then
    for i in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpFunc;;
            -v | --version)
                echo $version
                exit 0;;
            -e | --engine)
                usedEngine=$2
                shift;;
            -s)
                sourceLang=$2
                shift;;
            -t)
                targetLang=$2
                shift;;
            "") ;;
            -*)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
            *)
                text=$1
                shift
        esac
        shift
    done
    [ -z "$text" ] && text=$(cat /dev/stdin)
fi

initConfig
readDotenv "$dotenv"
verification

case $usedEngine in
    deepl)
        translateDeepl;;
    libre)
        translateLibre;;
    exampleengine)
        translateEngine;;
    *)
        echo_err "Engine \"$usedEngine\" not found"
        exit 1;;
esac

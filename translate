#!/bin/bash
# author : lordpax
# backup v0.1.1

version="v0.1.1"
dotenv="$(dirname $(readlink -f $0))/.env"
engins=(deepl google)
usedEngin="deepl"
sourceLang=""
targetLang=""
text=""

# echo_err <msg>
function echo_err() {
    [ "$1" == "" ] && exit 1
    echo -e "\e[31mERROR :\e[0m $1" > /dev/stderr
}

function helpFunc() {
    echo -e $"Usage : $(basename $0) <option> [text]

Option :
-h or --help ........................... Show help
-v or --version ........................ Show version
-e or --engin <engin> .................. Set engin (default : deepl) (soon)
-s <lang> .............................. Source language
-t <lang> .............................. Target language

Example :
translate -t fr \"Hello World!\"
echo \"Hello World!\" | translate -t fr"

    exit 0
}

function verification() {
    [ "$(which jq)" != "/usr/bin/jq" ] && echo_err "\"jq\" is required" && exit 1
    [ "$DEEPL_ROUTE" == "" ] && echo_err "Deepl route is not defined in dotenv" && exit 1
    [ "$DEEPL_KEY" == "" ] && echo_err "Deepl api key is not defined in dotenv" && exit 1
    [ "$text" == "" ] && echo_err "Text is needed" && exit 1
    [ "$targetLang" == "" ] && echo_err "Target language is needed" && exit 1
}

# readDotenv <env>
function readDotenv() {
    ([ "$1" == "" ] || [ ! -f $1 ]) \
        && echo_err "Dotenv file not found" && exit 1

    local k
    local v

    while read var; do
        if [ ! ${var:0:1} = "#" ]; then
            k=${var%=*}
            v=${var#*=}
            [ ! -z "$k" ] && export $k=$v
        fi
    done < $1
}

function translateDeepl() {
    local translated

    if [ "$sourceLang" == "" ]; then
        translated=$(curl -s \
            -X POST "$DEEPL_ROUTE" \
            -H "Authorization: DeepL-Auth-Key $DEEPL_KEY" \
            -d "text=$text" \
            -d "target_lang=$targetLang"
        )
    else
        translated=$(curl -s \
            -X POST "$DEEPL_ROUTE" \
            -H "Authorization: DeepL-Auth-Key $DEEPL_KEY" \
            -d "text=$text" \
            -d "target_lang=$targetLang" \
            -d "source_lang=$sourceLang"
        )
    fi

    [ $? -ne 0 ] && echo_err "Something wrong with translation" && exit 1
    echo $translated | jq -r .translations[0].text
}

function translateGoogle() {
    echo "google translate will be added soon"
}

if [ $# -ge 1 ]; then
    for i in $(seq 1 $#); do
        case $1 in
            --help | -h)
                helpFunc;;
            --version | -v)
                echo $version
                exit 0;;
            -e | --engin)
                usedEngin=$2
                shift;;
            -s)
                sourceLang=$2
                shift;;
            -t)
                targetLang=$2
                shift;;
            "") ;;
            -*)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
            *)
                text=$1
                shift
        esac
        shift
    done
    [ "$text" == "" ] && text=$(cat /dev/stdin)
fi

readDotenv $dotenv
verification

case $usedEngin in
    deepl)
        translateDeepl;;
    google)
        translateGoogle;;
    *)
        echo_err "Engin \"$usedEngin\" not found"
        exit 1;;
esac
